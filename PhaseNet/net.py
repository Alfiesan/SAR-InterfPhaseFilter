
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

import os

class Network(nn.Module):
    def __init__(self):
        super(Network, self).__init__()
        self.np_parameters = np.load(os.path.dirname(os.path.abspath(__file__))+"/params.npz")

        self.E_in = nn.Conv2d(in_channels=2, out_channels=8, kernel_size=(5,5), stride=(1,1), padding=(2,2))
        self.E_in.weight.data = torch.from_numpy(self.np_parameters['E_in_filters'])
        self.E_in.bias.data = torch.from_numpy(self.np_parameters['E_in_biases'])
        self.E_B_0_DS_p = nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.E_B_0_DS_p.weight.data = torch.from_numpy(self.np_parameters['E_B_0_DS_p_filters'])
        self.E_B_0_DS_p.bias.data = torch.from_numpy(self.np_parameters['E_B_0_DS_p_biases'])
        self.E_B_0_0_0_p = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_0_0_0_p.weight.data = torch.from_numpy(self.np_parameters['E_B_0_0_0_p_filters'])
        self.E_B_0_0_0_p.bias.data = torch.from_numpy(self.np_parameters['E_B_0_0_0_p_biases'])
        self.E_B_0_0_1_p = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_0_0_1_p.weight.data = torch.from_numpy(self.np_parameters['E_B_0_0_1_p_filters'])
        self.E_B_0_0_1_p.bias.data = torch.from_numpy(self.np_parameters['E_B_0_0_1_p_biases'])
        self.E_B_1_DS_p = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.E_B_1_DS_p.weight.data = torch.from_numpy(self.np_parameters['E_B_1_DS_p_filters'])
        self.E_B_1_DS_p.bias.data = torch.from_numpy(self.np_parameters['E_B_1_DS_p_biases'])
        self.E_B_1_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_1_0_0_p.weight.data = torch.from_numpy(self.np_parameters['E_B_1_0_0_p_filters'])
        self.E_B_1_0_0_p.bias.data = torch.from_numpy(self.np_parameters['E_B_1_0_0_p_biases'])
        self.E_B_1_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_1_0_1_p.weight.data = torch.from_numpy(self.np_parameters['E_B_1_0_1_p_filters'])
        self.E_B_1_0_1_p.bias.data = torch.from_numpy(self.np_parameters['E_B_1_0_1_p_biases'])
        self.E_B_2_DS_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.E_B_2_DS_p.weight.data = torch.from_numpy(self.np_parameters['E_B_2_DS_p_filters'])
        self.E_B_2_DS_p.bias.data = torch.from_numpy(self.np_parameters['E_B_2_DS_p_biases'])
        self.E_B_2_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_2_0_0_p.weight.data = torch.from_numpy(self.np_parameters['E_B_2_0_0_p_filters'])
        self.E_B_2_0_0_p.bias.data = torch.from_numpy(self.np_parameters['E_B_2_0_0_p_biases'])
        self.E_B_2_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_2_0_1_p.weight.data = torch.from_numpy(self.np_parameters['E_B_2_0_1_p_filters'])
        self.E_B_2_0_1_p.bias.data = torch.from_numpy(self.np_parameters['E_B_2_0_1_p_biases'])
        self.E_B_3_DS_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.E_B_3_DS_p.weight.data = torch.from_numpy(self.np_parameters['E_B_3_DS_p_filters'])
        self.E_B_3_DS_p.bias.data = torch.from_numpy(self.np_parameters['E_B_3_DS_p_biases'])
        self.E_B_3_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_3_0_0_p.weight.data = torch.from_numpy(self.np_parameters['E_B_3_0_0_p_filters'])
        self.E_B_3_0_0_p.bias.data = torch.from_numpy(self.np_parameters['E_B_3_0_0_p_biases'])
        self.E_B_3_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_3_0_1_p.weight.data = torch.from_numpy(self.np_parameters['E_B_3_0_1_p_filters'])
        self.E_B_3_0_1_p.bias.data = torch.from_numpy(self.np_parameters['E_B_3_0_1_p_biases'])
        self.E_B_4_DS_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.E_B_4_DS_p.weight.data = torch.from_numpy(self.np_parameters['E_B_4_DS_p_filters'])
        self.E_B_4_DS_p.bias.data = torch.from_numpy(self.np_parameters['E_B_4_DS_p_biases'])
        self.E_B_4_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_4_0_0_p.weight.data = torch.from_numpy(self.np_parameters['E_B_4_0_0_p_filters'])
        self.E_B_4_0_0_p.bias.data = torch.from_numpy(self.np_parameters['E_B_4_0_0_p_biases'])
        self.E_B_4_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.E_B_4_0_1_p.weight.data = torch.from_numpy(self.np_parameters['E_B_4_0_1_p_filters'])
        self.E_B_4_0_1_p.bias.data = torch.from_numpy(self.np_parameters['E_B_4_0_1_p_biases'])
        self.B_B_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.B_B_0_0_p.weight.data = torch.from_numpy(self.np_parameters['B_B_0_0_p_filters'])
        self.B_B_0_0_p.bias.data = torch.from_numpy(self.np_parameters['B_B_0_0_p_biases'])
        self.B_B_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.B_B_0_1_p.weight.data = torch.from_numpy(self.np_parameters['B_B_0_1_p_filters'])
        self.B_B_0_1_p.bias.data = torch.from_numpy(self.np_parameters['B_B_0_1_p_biases'])
        self.D_B_0_US_p = nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.D_B_0_US_p.weight.data = torch.from_numpy(self.np_parameters['D_B_0_US_p_filters'])
        self.D_B_0_US_p.bias.data = torch.from_numpy(self.np_parameters['D_B_0_US_p_biases'])
        self.D_B_0_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_0_0_0_p.weight.data = torch.from_numpy(self.np_parameters['D_B_0_0_0_p_filters'])
        self.D_B_0_0_0_p.bias.data = torch.from_numpy(self.np_parameters['D_B_0_0_0_p_biases'])
        self.D_B_0_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_0_0_1_p.weight.data = torch.from_numpy(self.np_parameters['D_B_0_0_1_p_filters'])
        self.D_B_0_0_1_p.bias.data = torch.from_numpy(self.np_parameters['D_B_0_0_1_p_biases'])
        self.D_B_1_US_p = nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.D_B_1_US_p.weight.data = torch.from_numpy(self.np_parameters['D_B_1_US_p_filters'])
        self.D_B_1_US_p.bias.data = torch.from_numpy(self.np_parameters['D_B_1_US_p_biases'])
        self.D_B_1_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_1_0_0_p.weight.data = torch.from_numpy(self.np_parameters['D_B_1_0_0_p_filters'])
        self.D_B_1_0_0_p.bias.data = torch.from_numpy(self.np_parameters['D_B_1_0_0_p_biases'])
        self.D_B_1_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_1_0_1_p.weight.data = torch.from_numpy(self.np_parameters['D_B_1_0_1_p_filters'])
        self.D_B_1_0_1_p.bias.data = torch.from_numpy(self.np_parameters['D_B_1_0_1_p_biases'])
        self.D_B_2_US_p = nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.D_B_2_US_p.weight.data = torch.from_numpy(self.np_parameters['D_B_2_US_p_filters'])
        self.D_B_2_US_p.bias.data = torch.from_numpy(self.np_parameters['D_B_2_US_p_biases'])
        self.D_B_2_0_0_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_2_0_0_p.weight.data = torch.from_numpy(self.np_parameters['D_B_2_0_0_p_filters'])
        self.D_B_2_0_0_p.bias.data = torch.from_numpy(self.np_parameters['D_B_2_0_0_p_biases'])
        self.D_B_2_0_1_p = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_2_0_1_p.weight.data = torch.from_numpy(self.np_parameters['D_B_2_0_1_p_filters'])
        self.D_B_2_0_1_p.bias.data = torch.from_numpy(self.np_parameters['D_B_2_0_1_p_biases'])
        self.D_B_3_US_p = nn.ConvTranspose2d(in_channels=32, out_channels=16, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.D_B_3_US_p.weight.data = torch.from_numpy(self.np_parameters['D_B_3_US_p_filters'])
        self.D_B_3_US_p.bias.data = torch.from_numpy(self.np_parameters['D_B_3_US_p_biases'])
        self.D_B_3_0_0_p = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_3_0_0_p.weight.data = torch.from_numpy(self.np_parameters['D_B_3_0_0_p_filters'])
        self.D_B_3_0_0_p.bias.data = torch.from_numpy(self.np_parameters['D_B_3_0_0_p_biases'])
        self.D_B_3_0_1_p = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_3_0_1_p.weight.data = torch.from_numpy(self.np_parameters['D_B_3_0_1_p_filters'])
        self.D_B_3_0_1_p.bias.data = torch.from_numpy(self.np_parameters['D_B_3_0_1_p_biases'])
        self.D_B_4_US_p = nn.ConvTranspose2d(in_channels=16, out_channels=8, kernel_size=(2,2), stride=(2,2), padding=(0,0))
        self.D_B_4_US_p.weight.data = torch.from_numpy(self.np_parameters['D_B_4_US_p_filters'])
        self.D_B_4_US_p.bias.data = torch.from_numpy(self.np_parameters['D_B_4_US_p_biases'])
        self.D_B_4_0_0_p = nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_4_0_0_p.weight.data = torch.from_numpy(self.np_parameters['D_B_4_0_0_p_filters'])
        self.D_B_4_0_0_p.bias.data = torch.from_numpy(self.np_parameters['D_B_4_0_0_p_biases'])
        self.D_B_4_0_1_p = nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), stride=(1,1), padding=(1,1))
        self.D_B_4_0_1_p.weight.data = torch.from_numpy(self.np_parameters['D_B_4_0_1_p_filters'])
        self.D_B_4_0_1_p.bias.data = torch.from_numpy(self.np_parameters['D_B_4_0_1_p_biases'])
        self.D_out = nn.Conv2d(in_channels=8, out_channels=3, kernel_size=(5,5), stride=(1,1), padding=(2,2))
        self.D_out.weight.data = torch.from_numpy(self.np_parameters['D_out_filters'])
        self.D_out.bias.data = torch.from_numpy(self.np_parameters['D_out_biases'])

    def forward(self, input):
        E_prepped = self.E_in(input)
        E__inter_Output_0_shortcut_0 = self.E_B_0_DS_p(E_prepped)
        output_0004 = F.relu(E__inter_Output_0_shortcut_0)
        output_0005 = self.E_B_0_0_0_p(output_0004)
        output_0006 = F.relu(output_0005)
        E__inter_Output_0_comp_0 = self.E_B_0_0_1_p(output_0006)
        E__inter_Output_0 = E__inter_Output_0_shortcut_0 + E__inter_Output_0_comp_0
        E__inter_Output_1_shortcut_0 = self.E_B_1_DS_p(E__inter_Output_0)
        output_0010 = F.relu(E__inter_Output_1_shortcut_0)
        output_0011 = self.E_B_1_0_0_p(output_0010)
        output_0012 = F.relu(output_0011)
        E__inter_Output_1_comp_0 = self.E_B_1_0_1_p(output_0012)
        E__inter_Output_1 = E__inter_Output_1_shortcut_0 + E__inter_Output_1_comp_0
        E__inter_Output_2_shortcut_0 = self.E_B_2_DS_p(E__inter_Output_1)
        output_0016 = F.relu(E__inter_Output_2_shortcut_0)
        output_0017 = self.E_B_2_0_0_p(output_0016)
        output_0018 = F.relu(output_0017)
        E__inter_Output_2_comp_0 = self.E_B_2_0_1_p(output_0018)
        E__inter_Output_2 = E__inter_Output_2_shortcut_0 + E__inter_Output_2_comp_0
        E__inter_Output_3_shortcut_0 = self.E_B_3_DS_p(E__inter_Output_2)
        output_0022 = F.relu(E__inter_Output_3_shortcut_0)
        output_0023 = self.E_B_3_0_0_p(output_0022)
        output_0024 = F.relu(output_0023)
        E__inter_Output_3_comp_0 = self.E_B_3_0_1_p(output_0024)
        E__inter_Output_3 = E__inter_Output_3_shortcut_0 + E__inter_Output_3_comp_0
        bottleneck_in_shortcut_0 = self.E_B_4_DS_p(E__inter_Output_3)
        output_0028 = F.relu(bottleneck_in_shortcut_0)
        output_0029 = self.E_B_4_0_0_p(output_0028)
        output_0030 = F.relu(output_0029)
        bottleneck_in_comp_0 = self.E_B_4_0_1_p(output_0030)
        bottleneck_in = bottleneck_in_shortcut_0 + bottleneck_in_comp_0
        output_0033 = F.relu(bottleneck_in)
        output_0034 = self.B_B_0_0_p(output_0033)
        output_0035 = F.relu(output_0034)
        bottleneck_out_pre_sum = self.B_B_0_1_p(output_0035)
        bottleneck_out = bottleneck_out_pre_sum + bottleneck_in
        D__inter_Output_0_shortcut_0 = self.D_B_0_US_p(bottleneck_out)
        output_0039 = F.relu(D__inter_Output_0_shortcut_0)
        output_0040 = self.D_B_0_0_0_p(output_0039)
        output_0041 = F.relu(output_0040)
        D__inter_Output_0_comp_0 = self.D_B_0_0_1_p(output_0041)
        D__inter_Output_0 = D__inter_Output_0_shortcut_0 + D__inter_Output_0_comp_0
        D__inter_Output_1_shortcut_0 = self.D_B_1_US_p(D__inter_Output_0)
        output_0045 = F.relu(D__inter_Output_1_shortcut_0)
        output_0046 = self.D_B_1_0_0_p(output_0045)
        output_0047 = F.relu(output_0046)
        D__inter_Output_1_comp_0 = self.D_B_1_0_1_p(output_0047)
        D__inter_Output_1 = D__inter_Output_1_shortcut_0 + D__inter_Output_1_comp_0
        D__inter_Output_2_shortcut_0 = self.D_B_2_US_p(D__inter_Output_1)
        output_0051 = F.relu(D__inter_Output_2_shortcut_0)
        output_0052 = self.D_B_2_0_0_p(output_0051)
        output_0053 = F.relu(output_0052)
        D__inter_Output_2_comp_0 = self.D_B_2_0_1_p(output_0053)
        D__inter_Output_2 = D__inter_Output_2_shortcut_0 + D__inter_Output_2_comp_0
        D__inter_Output_3_shortcut_0 = self.D_B_3_US_p(D__inter_Output_2)
        output_0057 = F.relu(D__inter_Output_3_shortcut_0)
        output_0058 = self.D_B_3_0_0_p(output_0057)
        output_0059 = F.relu(output_0058)
        D__inter_Output_3_comp_0 = self.D_B_3_0_1_p(output_0059)
        D__inter_Output_3 = D__inter_Output_3_shortcut_0 + D__inter_Output_3_comp_0
        cleanedpre_out_shortcut_0 = self.D_B_4_US_p(D__inter_Output_3)
        output_0063 = F.relu(cleanedpre_out_shortcut_0)
        output_0064 = self.D_B_4_0_0_p(output_0063)
        output_0065 = F.relu(output_0064)
        cleanedpre_out_comp_0 = self.D_B_4_0_1_p(output_0065)
        cleanedpre_out = cleanedpre_out_shortcut_0 + cleanedpre_out_comp_0
        cleaned = self.D_out(cleanedpre_out)
        return cleaned
